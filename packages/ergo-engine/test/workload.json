[
  {
    "name": "smoketest",
    "dir": "../../../tests/smoke",
    "ergo": ["logic.ergo"],
    "models": ["smoke.cto"],
    "contract": "data.json",
    "options": {
      "$class": "org.accordproject.ergo.options.Options",
      "wrapVariables": false,
      "template": false
    },
    "request": "request.json",
    "state": "state.json",
    "contractName": "org.accordproject.smoke.Smoke",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": {
        "output": "Smoke.test successful"
      }
    }
  },
  {
    "name": "durationtest",
    "dir": "../../../tests/smoke",
    "ergo": ["duration.ergo"],
    "models": ["duration.cto"],
    "contract": "data.json",
    "request": "request.json",
    "state": "state.json",
    "contractName": "org.accordproject.smoke.Duration",
    "expected": {
      "response": {
        "output": "Duration.test successful"
      }
    }
  },
  {
    "name": "mathtest",
    "dir": "../../../tests/smoke",
    "ergo": ["math.ergo"],
    "models": ["smoke.cto"],
    "contract": "data.json",
    "request": "request.json",
    "state": "state.json",
    "contractName": "org.accordproject.smoke.Math",
    "currentTime": null,
    "expected": {
      "response": {
        "output": "Math.test successful"
      }
    }
  },
  {
    "name": "opttest",
    "dir": "../../../tests/opttest",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "request": "request.json",
    "state": "state.json",
    "contractName": "org.accordproject.opttest.OptTest",
    "currentTime": null,
    "expected": {
      "error": "Type error (at file ../../../tests/opttest/logic/logic.ergo line 20 col 2). The let type annotation `Nothing?' for the name `foo' does not match the actual type `Integer?'.\n  let foo : Nothing? =   // This should fail\n  ^                                         "
    }
  },
  {
    "name": "helloworldstate (old style)",
    "dir": "../../../tests/helloworldstateOld",
    "ergo": ["logic/logicOld.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "state": null,
    "contractName": "org.accordproject.helloworldstate.HelloWorldState",
    "currentTime": null,
    "expected": {
      "response": null,
      "state": {
        "counter": 0,
        "lastInput": "",
        "$class": "org.accordproject.helloworldstate.State"
      }
    }
  },
  {
    "name": "helloworldstate 1 (old style)",
    "dir": "../../../tests/helloworldstateOld",
    "ergo": ["logic/logicOld.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "state": "state1.json",
    "request": "request1.json",
    "contractName": "org.accordproject.helloworldstate.HelloWorldState",
    "currentTime": null,
    "expected": {
      "response": {
          "$class": "org.accordproject.helloworldstate.MyResponse",
          "output": "Hello Fred Blogs (Accord Project) (1.0)"
      },
      "state": {
        "counter": 1,
        "lastInput": "Accord Project",
        "$class": "org.accordproject.helloworldstate.State"
      }
    }
  },
  {
    "name": "helloworldstate 2 (old style)",
    "dir": "../../../tests/helloworldstateOld",
    "ergo": ["logic/logicOld.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "state": "state2.json",
    "request": "request2.json",
    "contractName": "org.accordproject.helloworldstate.HelloWorldState",
    "currentTime": null,
    "expected": {
      "response": {
          "$class": "org.accordproject.helloworldstate.MyResponse",
          "output": "Hello Fred Blogs (Linux Foundation) (2.0)"
      },
      "state": {
        "counter": 2,
        "lastInput": "Linux Foundation",
        "$class": "org.accordproject.helloworldstate.State"
      }
    }
  },
  {
    "name": "helloworldstate init (new style)",
    "dir": "../../../tests/helloworldstate",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "state": null,
    "contractName": "org.accordproject.helloworldstate.HelloWorldState",
    "currentTime": null,
    "expected": {
      "response": null,
      "state": {
        "counter": 0,
        "lastInput": "",
        "$class": "org.accordproject.helloworldstate.State"
      }
    }
  },
  {
    "name": "helloworldstate 1 (new style)",
    "dir": "../../../tests/helloworldstate",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "state": "state1.json",
    "request": "request1.json",
    "contractName": "org.accordproject.helloworldstate.HelloWorldState",
    "currentTime": null,
    "expected": {
      "response": {
          "$class": "org.accordproject.helloworldstate.MyResponse",
          "output": "Hello Fred Blogs (Accord Project) (1.0)"
      },
      "state": {
        "counter": 1,
        "lastInput": "Accord Project",
        "$class": "org.accordproject.helloworldstate.State"
      }
    }
  },
  {
    "name": "helloworldstate 2 (new style)",
    "dir": "../../../tests/helloworldstate",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "state": "state2.json",
    "request": "request2.json",
    "contractName": "org.accordproject.helloworldstate.HelloWorldState",
    "currentTime": null,
    "expected": {
      "response": {
          "$class": "org.accordproject.helloworldstate.MyResponse",
          "output": "Hello Fred Blogs (Linux Foundation) (2.0)"
      },
      "state": {
        "counter": 2,
        "lastInput": "Linux Foundation",
        "$class": "org.accordproject.helloworldstate.State"
      }
    }
  },
  {
    "name": "helloworldstate (with current time)",
    "dir": "../../../tests/helloworldstate",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "state": null,
    "contractName": "org.accordproject.helloworldstate.HelloWorldState",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": null,
      "state": {
        "counter": 0,
        "lastInput": "",
        "$class": "org.accordproject.helloworldstate.State"
      }
    }
  },
  {
    "name": "helloworld (with call)",
    "dir": "../../../tests/helloworld3",
    "ergo": ["logic/logic3.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "params": {
      "request": {
        "$class": "org.accordproject.helloworld.Request",
        "input": "Accord Project"
      },
      "hello": "Bonjour,"
    },
    "state": "state.json",
    "contractName": "org.accordproject.helloworld.HelloWorld",
    "clauseName": "helloworld",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": {
        "$class": "org.accordproject.helloworld.Response",
        "output" : "Bonjour, Fred Blogs (Accord Project)"
      }
    }
  },
  {
    "name": "initemittest",
    "dir": "../../../tests/initemittest",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "request": "request.json",
    "state": null,
    "contractName": "org.accordproject.initemittest.InitEmitTest",
    "currentTime": null,
    "expected": {
      "response": {
        "$class": "org.accordproject.initemittest.Response"
      },
      "state": {
        "$class": "org.accordproject.initemittest.State"
      }
    }
  },
  {
    "name": "initemittest (greeting)",
    "dir": "../../../tests/initemittest",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "request": "request.json",
    "state": "state.json",
    "contractName": "org.accordproject.initemittest.InitEmitTest",
    "currentTime": null,
    "expected": {
      "response": {
        "$class": "org.accordproject.initemittest.Response"
      },
      "state": {
        "$class": "org.accordproject.initemittest.State"
      },
      "emit": [{
        "$class": "org.accordproject.initemittest.Greeting",
        "message": "Voila!"
      }]
    }
  },
  {
    "name": "bad logic",
    "dir": "../../../tests/bad-logic",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "params": {},
    "state": "state.json",
    "contractName": "org.accordproject.helloworld.HelloWorld",
    "clauseName": "helloworld",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "error": "Parse error (at file ../../../tests/bad-logic/logic/logic.ergo line 17 col 20). \ncontract HelloWorld ovr TemplateModel {\n                    ^^^                "
    }
  },
  {
    "name": "inlinetest",
    "dir": "../../../tests/inlinetest",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "request": "request.json",
    "state": "state.json",
    "contractName": "org.accordproject.smoke.Math",
    "currentTime": null,
    "expected": {
      "$class": "org.accordproject.inline.MyResponse",
      "output1": 2,
      "output2": 2,
      "output3": [1, 2, 3],
      "output4": 2,
      "output5": 2,
      "output6": [1, 2, 3]
    }
  },
  {
    "name": "interests clause (generate text) (template)",
    "dir": "../../../tests/interests",
    "ergo": ["logic/interests.ergo","logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "options": {
      "$class": "org.accordproject.ergo.options.Options",
      "wrapVariables": false,
      "template": true
    },
    "params": {},
    "state": "state.json",
    "contractName": "org.accordproject.interests.Interests",
    "clauseName": "generateText",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": "\nThis is a fixed interest loan to the amount of 100000.0\nat the yearly interest rate of 2.5%\nwith a loan term of 15,\nand monthly payments of {{667.0}}\n"
    }
  },
  {
    "name": "interests clause (generate text)",
    "dir": "../../../tests/interests",
    "ergo": ["logic/interests.ergo","logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "options": null,
    "params": {},
    "state": "state.json",
    "contractName": "org.accordproject.interests.Interests",
    "clauseName": "generateText",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": "\nThis is a fixed interest loan to the amount of 100000.0\nat the yearly interest rate of 2.5%\nwith a loan term of 15,\nand monthly payments of 667.0\n"
    }
  },
  {
    "name": "helloworldcontract (generate text for template)",
    "dir": "../../../tests/helloworldcontract",
    "ergo": ["logic/logic.ergo"],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "options": {
      "$class": "org.accordproject.ergo.options.Options",
      "wrapVariables": false,
      "template": true
    },
    "params": {},
    "grammar": "text/grammar.tem.md",
    "state": "state.json",
    "contractName": "org.accordproject.helloworld.HelloWorld",
    "clauseName": "generateText",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": "Name of the person to greet: \"Fred Blogs\".\nThank you!\n Here is a first name: \"John Do\" \n Here is a second name: \"Jane Doe\" \n"
    }
  },
  {
    "name": "helloworldcontract (generate text without logic)",
    "dir": "../../../tests/helloworldcontract",
    "ergo": [],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "options": {
      "$class": "org.accordproject.ergo.options.Options",
      "wrapVariables": false,
      "template": true
    },
    "params": {},
    "grammar": "text/grammar.tem.md",
    "state": "state.json",
    "contractName": "org.accordproject.helloworld.HelloWorld",
    "clauseName": "generateText",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": "Name of the person to greet: \"Fred Blogs\".\nThank you!\n Here is a first name: \"John Do\" \n Here is a second name: \"Jane Doe\" \n"
    }
  },
  {
    "name": "volume discount (unordered list)",
    "dir": "../../../tests/volumediscountlist",
    "ergo": [],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "options": {
      "$class": "org.accordproject.ergo.options.Options",
      "wrapVariables": false,
      "template": true
    },
    "params": {},
    "grammar": "text/grammar.tem.md",
    "state": "state.json",
    "contractName": "org.accordproject.volumediscountlist.VolumeDiscount",
    "clauseName": "generateText",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": "Volume-Based Card Acceptance Agreement [Abbreviated]\n\nThis Agreement is by and between Card, Inc., a New York corporation, and you, the Merchant. By accepting the Card, you agree to be bound by the Agreement. \nDiscount means an amount that we charge you for accepting the Card, which amount is: \n(i) a percentage (Discount Rate) of the face amount of the Charge that you submit, or a flat per-\nTransaction fee, or a combination of both; and/or \n(ii) a Monthly Flat Fee (if you meet our requirements).\n\nTransaction Processing and Payments. Our Card acceptance, processing, and payment requirements are set forth in the Merchant Regulations. Some requirements are summarized here for ease of reference, but do not supersede the provisions in the Merchant Regulations.\nPayment for Charges. We will pay you, through our agent, according to your payment plan in US dollars for the face amount of Charges submitted from your Establishments less all applicable deductions, rejections, and withholdings, which include: \n(i) the Discount, \n(ii) any amounts you owe us or our Affiliates, \n(iii) any amounts for which we have Chargebacks and \n(iv) any Credits you submit. Your initial Discount is indicated in the Agreement or otherwise provided to you in writing by us. In addition to your Discount we may charge you additional fees and assessments, as listed in the Merchant Regulations or as otherwise provided to you in writing by us. We may adjust any of these amounts and may change any other amount we charge you for accepting the Card.\n\nSETTLEMENT\na) Settlement Amount. Our agent will pay you according to your payment plan, as described below, in US dollars for the face amount of Charges submitted from your Establishments less all applicable deductions, rejections, and withholdings, which include: \n    (i) the Discount, \n    (ii) any amounts you owe us or our Affiliates, \n    (iii) any amounts for which we have Chargebacks, and (iv) any Credits you submit. Our agent will subtract the full amount of all applicable deductions, rejections, and withholdings, from this payment to you (or debit your Bank Account), but if it cannot, then you must pay it promptly upon demand.\nb) Discount. The Discount is determined according to the following table:\n\n- 1.0$ million <= Volume < 10.0$ million : 3.1%\n- 10.0$ million <= Volume < 50.0$ million : 2.9%\n- 50.0$ million <= Volume < 500.0$ million : 2.5%\n- 500.0$ million <= Volume < 1000.0$ million : 1.0%\n"
    }
  },
  {
    "name": "volume discount (ordered list)",
    "dir": "../../../tests/volumediscountlist",
    "ergo": [],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "options": {
      "$class": "org.accordproject.ergo.options.Options",
      "wrapVariables": false,
      "template": true
    },
    "params": {},
    "grammar": "text/grammar2.tem.md",
    "state": "state.json",
    "contractName": "org.accordproject.volumediscountlist.VolumeDiscount",
    "clauseName": "generateText",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": "Volume-Based Card Acceptance Agreement [Abbreviated]\n\nThis Agreement is by and between Card, Inc., a New York corporation, and you, the Merchant. By accepting the Card, you agree to be bound by the Agreement. \nDiscount means an amount that we charge you for accepting the Card, which amount is: \n(i) a percentage (Discount Rate) of the face amount of the Charge that you submit, or a flat per-\nTransaction fee, or a combination of both; and/or \n(ii) a Monthly Flat Fee (if you meet our requirements).\n\nTransaction Processing and Payments. Our Card acceptance, processing, and payment requirements are set forth in the Merchant Regulations. Some requirements are summarized here for ease of reference, but do not supersede the provisions in the Merchant Regulations.\nPayment for Charges. We will pay you, through our agent, according to your payment plan in US dollars for the face amount of Charges submitted from your Establishments less all applicable deductions, rejections, and withholdings, which include: \n(i) the Discount, \n(ii) any amounts you owe us or our Affiliates, \n(iii) any amounts for which we have Chargebacks and \n(iv) any Credits you submit. Your initial Discount is indicated in the Agreement or otherwise provided to you in writing by us. In addition to your Discount we may charge you additional fees and assessments, as listed in the Merchant Regulations or as otherwise provided to you in writing by us. We may adjust any of these amounts and may change any other amount we charge you for accepting the Card.\n\nSETTLEMENT\na) Settlement Amount. Our agent will pay you according to your payment plan, as described below, in US dollars for the face amount of Charges submitted from your Establishments less all applicable deductions, rejections, and withholdings, which include: \n    (i) the Discount, \n    (ii) any amounts you owe us or our Affiliates, \n    (iii) any amounts for which we have Chargebacks, and (iv) any Credits you submit. Our agent will subtract the full amount of all applicable deductions, rejections, and withholdings, from this payment to you (or debit your Bank Account), but if it cannot, then you must pay it promptly upon demand.\nb) Discount. The Discount is determined according to the following table:\n\n1. 1.0$ million <= Volume < 10.0$ million : 3.1%\n1. 10.0$ million <= Volume < 50.0$ million : 2.9%\n1. 50.0$ million <= Volume < 500.0$ million : 2.5%\n1. 500.0$ million <= Volume < 1000.0$ million : 1.0%\n"
    }
  },
  {
    "name": "Generate text for a nested list block",
    "dir": "../../../tests/helloworldlist",
    "ergo": [],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "options": {
      "$class": "org.accordproject.ergo.options.Options",
      "wrapVariables": false,
      "template": true
    },
    "params": {},
    "grammar": "text/grammar.tem.md",
    "state": "state.json",
    "contractName": "org.accordproject.helloworld.Helloworld",
    "clauseName": "generateText",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": "Name of the person to greet: \"Fred Blogs\".\nThank you!\n\n- Here is a name: \"Nail\" {{4}}\n- Here is a name: \"Suitcase\" {{8}}\n   - Includes: \"J1\" \n   - Includes: \"J2\" \n- Here is a name: \"Laptop\" {{6}}\n   - Includes: \"D1\" \n"
    }
  },
  {
    "name": "Nested unordered list block",
    "dir": "../../../tests/helloworldlist",
    "ergo": [],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "options": {
      "$class": "org.accordproject.ergo.options.Options",
      "wrapVariables": false,
      "template": true
    },
    "params": {},
    "grammar": "text/grammar.tem.md",
    "state": "state.json",
    "contractName": "org.accordproject.helloworld.Helloworld",
    "clauseName": "generateText",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": "Name of the person to greet: \"Fred Blogs\".\nThank you!\n\n- Here is a name: \"Nail\" {{4}}\n- Here is a name: \"Suitcase\" {{8}}\n   - Includes: \"J1\" \n   - Includes: \"J2\" \n- Here is a name: \"Laptop\" {{6}}\n   - Includes: \"D1\" \n"
    }
  },
  {
    "name": "Nested ordered list block",
    "dir": "../../../tests/helloworldlist2",
    "ergo": [],
    "models": ["model/model.cto"],
    "contract": "data.json",
    "options": {
      "$class": "org.accordproject.ergo.options.Options",
      "wrapVariables": false,
      "template": true
    },
    "params": {},
    "grammar": "text/grammar.tem.md",
    "state": "state.json",
    "contractName": "org.accordproject.helloworld.Helloworld",
    "clauseName": "generateText",
    "currentTime": "2019-01-01T16:34:00-05:00",
    "expected": {
      "response": "Name of the person to greet: \"Fred Blogs\".\nThank you!\n\n1. Here is a name: \"Nail\" {{4}}\n1. Here is a name: \"Suitcase\" {{8}}\n   1. Includes: \"J1\" \n   1. Includes: \"J2\" \n1. Here is a name: \"Laptop\" {{6}}\n   1. Includes: \"D1\" \n"
    }
  }
]