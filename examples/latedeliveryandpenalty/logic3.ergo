/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 namespace org.accordproject.latedeliveryandpenalty

// Imports CTO files
import org.accordproject.contract.*
import org.accordproject.latedeliveryandpenalty.*
// Date and time library
import ergo.moment.*

/* From template:
Late Delivery and Penalty. In case of delayed delivery[{" except for Force Majeure cases,":? forceMajeure}] the Seller shall pay to the Buyer for every [{penaltyDuration}] of delay penalty amounting to [{penaltyPercentage}]% of the total value of the Equipment whose delivery has been delayed. Any fractional part of a [{fractionalPart}] is to be considered a full [{fractionalPart}]. The total amount of penalty shall not however, exceed [{capPercentage}]% of the total value of the Equipment involved in late delivery. If the delay is more than [{termination}], the Buyer is entitled to terminate this Contract.
 */

// Declare a contract over a template model
contract LateDeliveryAndPenalty over TemplateModel {
  // Defines a function to calculate the penalty
  clause calculatePenalty(diff : Double, goodsValue : Double) : Double {
    // penalty formula
    define variable penalty = (diff / contract.penaltyDuration.amount) * contract.penaltyPercentage/100 * goodsValue;
    // penalty may be capped
    if penalty > contract.capPercentage/100 * goodsValue {
       return contract.capPercentage/100 * goodsValue
    } else {
       return penalty
    }
  }

  // Clause for volume discount
  clause latedeliveryandpenalty(request : LateDeliveryAndPenaltyRequest) : LateDeliveryAndPenaltyResponse {
    // Guard against calling late delivery clause too early
    define variable agreed = request.agreedDelivery;
    enforce momentIsBefore(agreed,now()) else {
      throw Error{ message : "Cannot exercise late delivery before delivery date" }
    };
    // Guard against force majeure
    enforce !contract.forceMajeure || !request.forceMajeure else {
      return new LateDeliveryAndPenaltyResponse{
	penalty: 0,
	buyerMayTerminate: true
      }
    };

    // difference between current date and agreed upon date
    define variable diff = momentDiff(agreed,now());
    define variable penalty = calculatePenalty(diff,request.goodsValue);
    return new LateDeliveryAndPenaltyResponse{
	penalty: capped,
	buyerMayTerminate: diff > contract.termination.amount
    }
  }
}
