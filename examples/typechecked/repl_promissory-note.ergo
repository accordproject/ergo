import org.accordproject.cicero.contract.*
import org.accordproject.cicero.runtime.*
import org.accordproject.money.MonetaryAmount

define transaction Payment extends Request {
  amountPaid : MonetaryAmount
}

define transaction Result extends Response {
  outstandingBalance : Double
}

define asset PromissoryNoteContract extends AccordContract {
  amount : MonetaryAmount,
  date : DateTime,
  maker : String,
  interestRate : Double,
  individual : Boolean,
  makerAddress : String,
  lender : String,
  lenderAddress : String,
  principal : MonetaryAmount,
  maturityDate : DateTime,
  defaultDays :  Integer,
  insolvencyDays : Integer,
  jurisdiction : String,
}

define function compoundInterestMultiple(annualInterest : Double, numberOfDays : Double) : Double {
    return (1.0 + annualInterest) ^ (numberOfDays / 365.0)
}

contract PromissoryNote over PromissoryNoteContract {
  clause check(request : Payment) : Result {
    enforce contract.interestRate >= 0.0;
    enforce contract.amount.doubleValue >= 0.0;
    let outstanding = contract.amount.doubleValue - request.amountPaid.doubleValue;
    enforce outstanding >= 0.0;

    let numberOfDays = dateTimeDiffDays(now(),contract.date);
    enforce numberOfDays >= 0.0;
    let compounded =  outstanding * compoundInterestMultiple(contract.interestRate, numberOfDays);

    return Result{
      outstandingBalance: compounded
    }
  }
}

set contract PromissoryNote over PromissoryNoteContract{
  contractId : "1231",
  parties : none,
  amount: MonetaryAmount{
    doubleValue: 1000.0,
    currencyCode: "USD"
  },
  date: dateTime("30 Jan 2018 00:00:00"),
  maker: "Daniel Selman",
  interestRate: 3.8,
  individual: true,
  makerAddress: "1 Main Street",
  lender: "Clause",
  legalEntity: "CORP",
  lenderAddress: "246 5th Ave, 3rd Fl, New York, NY 10001",
  principal: MonetaryAmount{
    doubleValue: 500.0,
    currencyCode: "USD"
  },
  maturityDate: dateTime("20 Jan 2019 00:00:00"),
  defaultDays: 90,
  insolvencyDays: 90,
  jurisdiction: "New York, NY"
}
call init(Request{});
call check(Payment{ amountPaid : MonetaryAmount{ doubleValue : 100.0, currencyCode: "USD" } });

