/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.safte

import org.accordproject.cicero.contract.*
import org.accordproject.cicero.runtime.*

// Contract parameters
define asset SafteContract extends AccordContract {
  companyName : String,
  purchaser : String,
  purchaseAmount : Double,
  discount : Double,
  projectName : String,
  amount : Double,
  months : Integer
}

// Contract state
define enum SafteStatus {
  PENDING, EXECUTED
}
define asset SafteState extends AccordContractState {
  status : SafteStatus
}

// Token sale Request/Response
define transaction TokenSale extends Request {
  tokenPrice : Double
}
define transaction TokenShare extends Response {
  tokenAmount : Double
}

// Equity financing Request/Response
define transaction EquityFinancing extends Request {
  sharePrice : Double
}
define transaction EquityShare extends Response {
  equityAmount : Double
}

// Dissolution Request/Response
define transaction DissolutionEvent extends Request {
  cause : String
}
define transaction PayOut extends Response {
 amount : Double
}

contract Safte
  over SafteContract
  state SafteState {
  clause init() : Unit {
    set state SafteState {
      stateId: "1",
      status: "PENDING"
    };
    return
  }

  clause tokenSale(request : TokenSale) : TokenShare {
    enforce state.status = "PENDING";
    let discountRate = (100.0 - contract.discount) / 100.00;
    let discountPrice = request.tokenPrice * discountRate;
    set state SafteState {
      stateId: "1",
      status: "EXECUTED"
    };
    return TokenShare{
      tokenAmount : contract.purchaseAmount / discountPrice
    }
  }

  clause equityFinancing(request : EquityFinancing) : EquityShare {
    enforce state.status = "PENDING";
    let discountRate = (100.0 - contract.discount) / 100.00;
    let discountPrice = request.sharePrice * discountRate;
    set state SafteState {
      stateId: "1",
      status: "EXECUTED"
    };
    return EquityShare{
      equityAmount : contract.purchaseAmount / discountPrice
    }
  }

  clause dissolutionEvent(request : DissolutionEvent) : PayOut {
    enforce state.status = "PENDING";
    set state SafteState {
      stateId: "1",
      status: "EXECUTED"
    };
    return PayOut{
      amount : contract.purchaseAmount
    }
  }
}

set contract Safte over SafteContract{
  contractId: "Umbrella#231",
  parties: none,
  companyName: "ACME",
  purchaser: "Dan",
  purchaseAmount: 25.0,
  discount: 7.0,
  projectName: "Umbrella Tokens",
  amount : 1000.0,
  months : 12
}

call init()
call dissolutionEvent(DissolutionEvent{ cause : "Cold feet" })
call tokenSale(TokenSale{ tokenPrice: 3.14 })
call equityFinancing(EquityFinancing{ sharePrice: 2.98 })

