namespace org.accordproject.perishablegoods

import org.accordproject.contract.*
import org.accordproject.perishablegoods.*

contract PerishableGoods over TemplateModel {
  // Auxiliary function calculating penalty from temperature readings
  define function calculatePenalty(readings : TemperatureReading[]) : Double {
    define variable tempReadings = foreach x in readings return x.centigrade;
    // find the lowest temperature reading
    define variable lowestReading = min(tempReadings);
    // find the highest temperature reading
    define variable highestReading = max(tempReadings);
    if lowestReading < contract.minTemperature {
      return (contract.minTemperature - lowestReading) * contract.minPenaltyFactor
    } else if highestReading > contract.maxTemperature {
      return highestReading - contract.maxTemperature) * contract.maxPenaltyFactor
    } else { return 0 };
  }

  // Clause for volume discount
  clause payout(request : ShipmentReceived) : PriceCalculation throws Error {
    // Guard against unitCount outside the bounds specified in the clause
    enforce request.unitCount < contract.minUnits || request.unitCount > contract.maxUnits else {
      throw Error{ message : 'Units received out of range for the contract.' }
    };
    // Guard against requests for payout after the dueDate
    enforce momentIsAfter(contract.dueDate,request.timestamp) else {
      return new PriceCalculation{
        totalPrice : 0,
        penalty : 0,
        late : true
    };
    // Guard against missing temperature readings
    enforce var readings = request.shipment.temperatureReadings! else {
      throw Error{ message : 'No temperature readings received.');
    };
    // Calculates payout
    define variable payOut = contract.unitPrice * request.unitCount;
    // Calculates penalty if any
    define variable totalPenalty = calculatePenalty(readings) * request.unitCount;
    // Returns a Price calculation, applying any penalities
    return new PriceCalculation{
      totalPrice : max(payOut - totalPenalty, 0);
      penalty : totalPenalty;
      late : false
    }
  }
}
