/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.perishablegoods

import org.accordproject.contract.*
import org.accordproject.perishablegoods.*

contract PerishableGoods over TemplateModel {
  // Auxiliary function calculating penalty from temperature readings
  define function calculatePenalty(readings : TemperatureReading[]) : Double {
    let tempReadings = foreach x in readings return x.centigrade;
    // find the lowest temperature reading
    let lowestReading = min(tempReadings);
    // find the highest temperature reading
    let highestReading = max(tempReadings);
    if lowestReading < contract.minTemperature {
      return (contract.minTemperature - lowestReading) * contract.minPenaltyFactor
    } else if highestReading > contract.maxTemperature {
      return highestReading - contract.maxTemperature) * contract.maxPenaltyFactor
    } else { return 0 };
  }

  // Clause for volume discount
  clause payout(request : ShipmentReceived) : PriceCalculation {
    // Guard against unitCount outside the bounds specified in the clause
    enforce request.unitCount < contract.minUnits || request.unitCount > contract.maxUnits else {
      throw "Units received out of range for the contract."
    };
    // Guard against requests for payout after the dueDate
    enforce isAfter(contract.dueDate,request.timestamp) else
      return PriceCalculation{
        totalPrice : 0,
        penalty : 0,
        late : true
			};
    // Guard against missing temperature readings
    enforce var readings = request.shipment.temperatureReadings! else
      throw "No temperature readings received.";
    ;
    // Calculates payout
    let payOut = contract.unitPrice * request.unitCount;
    // Calculates penalty if any
    let totalPenalty = calculatePenalty(readings) * request.unitCount;
    // Returns a Price calculation, applying any penalities
    return PriceCalculation{
      totalPrice : max(payOut - totalPenalty, 0);
      penalty : totalPenalty;
      late : false
    }
  }
}
