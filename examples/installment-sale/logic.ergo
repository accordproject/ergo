namespace org.accordproject.installmentsale

contract InstallmentSale over TemplateModel {
  clause PayInstallment(request : Installment) : Balance {
    enforce (state.status = "WaitingForFirstDayOfNextMonth"); // Make sure this is only called in the right state
    enforce (contract.MIN_PAYMENT <= state.balance_remaining) and (state.next_payment_month < 23);
    enforce (contract.MIN_PAYMENT <= request.amount); // Underpaying is forbidden
    enforce (request.amount <= state.balance_remaining); // overpaying is forbidden. this is NOT checked statically.

    define variable before_interest = state.balance_remaining - request.amount;
    define variable balance = before_interest * (1.0 + contract.INTEREST_RATE/100.00);
		define variable total_paid = state.total_paid + request.amount;

    set state new ContractState {
      status: "WaitingForFirstDayOfNextMonth",
      balance_remaining: balance,
			total_paid: total_paid,
      next_payment_month: state.next_payment_month + 1.0
    };
		emit new PaymentObligation{
			from: contract.BUYER,
			to: contract.SELLER,
			amount: request.amount
		};
    return new Balance{
      balance: balance,
			total_paid: total_paid
    }
  }
  clause PayLastInstallment(request : ClosingPayment) : Balance {
    //enforce (request.amount = state.balance_remaining + contract.DUE_AT_CLOSING);
    define variable balance = state.balance_remaining + contract.DUE_AT_CLOSING - request.amount;
		define variable total_paid = state.total_paid + request.amount;
    set state new ContractState {
      status: "Fulfilled",
      balance_remaining: balance,
			total_paid: total_paid,
      next_payment_month: 0.0 // ???
    };
		emit new PaymentObligation{
			from: contract.BUYER,
			to: contract.SELLER,
			amount: request.amount
		};
    return new Balance{
      balance: balance,
			total_paid: total_paid
    }
  }
}
