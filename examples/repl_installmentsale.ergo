import org.accordproject.cicero.contract.*
import org.accordproject.cicero.runtime.*
import org.accordproject.money.MonetaryAmount

define concept Installment extends Request {
   amount : Double
}

define concept ClosingPayment extends Request {
  amount : Double
}

define concept Balance extends Request {
  balance : Double,
  total_paid : Double
}

define event MyObligation {
  party : String
}
define event PaymentObligation extends MyObligation {
   amount : Double
}

define asset InstallmentSaleState extends AccordContractState {
  status : String,
  balance_remaining : Double,
  next_payment_month : Integer,
  total_paid : Double
}

define asset InstallmentSaleContract extends AccordContract {
  BUYER : String,
  SELLER : String,
  INITIAL_DUE : Double,
  INTEREST_RATE : Double,
  TOTAL_DUE_BEFORE_CLOSING : Double,
  MIN_PAYMENT : Double,
  DUE_AT_CLOSING : Double
}

contract InstallmentSale over InstallmentSaleContract state InstallmentSaleState {
	clause init(request:Request) {
    set state InstallmentSaleState{
      stateId: "org.accordproject.installmentsale.InstallmentSaleState#1",
      status: "WaitingForFirstDayOfNextMonth",
      balance_remaining: contract.INITIAL_DUE,
      total_paid: 0.0,
      next_payment_month: 1
    };
		return
	}
  clause PayInstallment(request : Installment) : Balance emits PaymentObligation {
    let before_interest = state.balance_remaining - request.amount;
    let balance = before_interest * (1.0 + contract.INTEREST_RATE/100.00);
    let total_paid = state.total_paid + request.amount;

    set state InstallmentSaleState{
      stateId: "1",
			status: "WaitingForFirstDayOfNextMonth",
      balance_remaining: balance,
      total_paid: total_paid,
      next_payment_month: state.next_payment_month +i 1
    };
    emit PaymentObligation{
			eventId: "event1",
			timestamp: "now",
      party: contract.BUYER,
      amount: request.amount
    };
    return Balance{
      balance: balance,
      total_paid: total_paid
    }
  }
  clause PayLastInstallment(request : ClosingPayment) : Balance emits PaymentObligation {
    enforce (request.amount = state.balance_remaining + contract.DUE_AT_CLOSING);
    let balance = state.balance_remaining + contract.DUE_AT_CLOSING - request.amount;
    let total_paid = state.total_paid + request.amount;
    set state InstallmentSaleState{
      stateId: "1",
      status: "Fulfilled",
      balance_remaining: balance,
      total_paid: total_paid,
      next_payment_month: 0
    };
    emit PaymentObligation{
			eventId: "event1",
			timestamp: "now",
      party: contract.BUYER,
      amount: request.amount
    };
    return Balance{
      balance: balance,
      total_paid: total_paid
    }
  }
}
