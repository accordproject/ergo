/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.promissorynote

import org.accordproject.cicero.runtime.*

define function compoundInterestMultiple(annualInterest : Double, numberOfDays : Double) : Double {
    return (1.0 + annualInterest) ^ (numberOfDays / 365.0)
}

contract PromissoryNote over PromissoryNoteContract {
  clause check(request : Payment) : Result throws ErrorResponse {
    enforce contract.interestRate >= 0.0;
    enforce contract.amount.doubleValue >= 0.0;
    let outstanding = contract.amount.doubleValue - request.amountPaid.doubleValue;
		let interestRate = contract.interestRate ?? 3.4;
    enforce outstanding >= 0.0;

    let numberOfDays = dateTimeDiffDays(dateTime("17 May 2018 13:53:33 EST"),dateTime(contract.date));
    enforce numberOfDays >= 0.0;
    let compounded =  outstanding * compoundInterestMultiple(contract.interestRate, numberOfDays);

    return Result{
      outstandingBalance: compounded
    }
  }
}
