namespace org.accordproject.smoke

define concept A{ a : Integer }
define concept C{ contract : String }

define transaction MyRequest {
  input: String,
  someint: Integer
}

define transaction MyResponse {
  output: String
}

define concept Test {
  contract: String
}

define concept TemplateModel {
}

contract Smoke over TemplateModel {
  clause test(request : MyRequest) : MyResponse {
    enforce(1.0 + 1.0 = 2.0);
    enforce(-1.0 = 0.0 - 1.0);
    enforce(-(1.0 + 2.0) = -3.0);
    enforce(-i1 = 0 -i 1);
    enforce(0.0 < 1.0);
    enforce(0 <i 1);
    enforce(0 <i request.someint);
    enforce(0 <=i 1);
    enforce(0 <=i request.someint);
    enforce(!(1 >i 1));
    enforce(1 >i 0);
    enforce("Hello" ++ " " ++ "World!" = "Hello World!");
    enforce(some(1) ?? 2 = 1);
    enforce(some(A{ a : 1 })?.a = some(1));
    enforce(some(A{ a : 1 })?.a != none);
    enforce(none?.a = none);
    enforce(none?.a ?? 2 = 2);
    enforce(some(A{ a : 1 })?.a ?? 2 = 1);
    enforce(C{ contract : "foo" }.contract = "foo");
    enforce(C{ contract : "foo" }.contract = "foo");
    return MyResponse{
      output: "Smoke.test successful"
    }
  }
}
