/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.installmentsale

import org.accordproject.cicero.contract.*
import org.accordproject.cicero.runtime.*
import org.accordproject.money.MonetaryAmount

define concept Installment extends Request {
   amount : Double
}

define concept ClosingPayment extends Request {
}

define concept Balance extends Response {
  balance : Double,
  total_paid : Double
}

define event MyObligation {
  party : String
}
define event PaymentObligation extends MyObligation {
   amount : Double
}

define asset InstallmentSaleState extends AccordContractState {
  status : String,
  balance_remaining : Double,
  next_payment_month : Integer,
  total_paid : Double
}

define asset InstallmentSaleContract extends AccordContract {
  BUYER : String,
  SELLER : String,
  INITIAL_DUE : Double,
  INTEREST_RATE : Double,
  TOTAL_DUE_BEFORE_CLOSING : Double,
  MIN_PAYMENT : Double,
  DUE_AT_CLOSING : Double
}

contract InstallmentSale over InstallmentSaleContract state InstallmentSaleState {
  clause init() : Unit {
    set state InstallmentSaleState{
      stateId: "org.accordproject.installmentsale.InstallmentSaleState#1",
      status: "WaitingForFirstDayOfNextMonth",
      balance_remaining: contract.TOTAL_DUE_BEFORE_CLOSING,
      total_paid: 0.0,
      next_payment_month: 1
    };
    return
  }
  clause payInstallment(request : Installment) : Balance {
    let before_interest = state.balance_remaining - request.amount;
    let balance = before_interest * (1.0 + contract.INTEREST_RATE/100.00);
    let total_paid = state.total_paid + request.amount;

    set state InstallmentSaleState{
      stateId: "1",
      status: "WaitingForFirstDayOfNextMonth",
      balance_remaining: balance,
      total_paid: total_paid,
      next_payment_month: state.next_payment_month + 1
    };
    emit PaymentObligation{
      party: contract.BUYER,
      amount: request.amount
    };
    return Balance{
      balance: balance,
      total_paid: total_paid
    }
  }
  clause payLastInstallment(request : ClosingPayment) : Balance {
    let finalAmount = contract.DUE_AT_CLOSING + state.balance_remaining;
    let total_paid = state.total_paid + finalAmount;
		let balance = 0.0;
    set state InstallmentSaleState{
      stateId: "1",
      status: "Fulfilled",
      balance_remaining: balance,
      total_paid: total_paid,
      next_payment_month: 0
    };
    emit PaymentObligation{
      party: contract.BUYER,
      amount: finalAmount
    };
    return Balance{
      balance: balance,
      total_paid: total_paid
    }
  }
}

set contract InstallmentSale over InstallmentSaleContract{
  contractId: "a0174e75-29d1-4323-a209-0531048abf9d",
  parties: none,
  BUYER : "Dan",
  SELLER : "Ned",
  INITIAL_DUE : 10000.0,
  INTEREST_RATE : 3.5,
  TOTAL_DUE_BEFORE_CLOSING : 9500.0,
  MIN_PAYMENT : 500.0,
  DUE_AT_CLOSING : 500.0
}
call init()
call payInstallment(Installment{ amount: 2000.00 })
call payInstallment(Installment{ amount: 2000.00 })
call payInstallment(Installment{ amount: 2000.00 })
call payInstallment(Installment{ amount: 2000.00 })
call payLastInstallment(ClosingPayment{})
