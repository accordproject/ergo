(*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

<doc text="Hyperledger Composer CTO data structures.

   Based on the documentation available at:
   https://hyperledger.github.io/composer/reference/cto_language.html

">

type json <ocaml module="Yojson.Basic" t="t"> = abstract
<doc text="Type of arbitrary JSON values.">

type loc = {
    offset : int;
    line : int;
    column: int;
  } <ocaml field_prefix="cto_loc_">

type location = {
    start : loc;
    end : loc;
} <ocaml field_prefix="cto_location_">

type decorator = json

type propType = {
    name : string;
} <ocaml field_prefix="cto_prop_type_">
type optional = {
    ttype <json name="type"> : string;
  }
type declaration = {
    ttype <json name="type"> : string;
    id : id;
    ?propertyType : propType nullable;
    ?array : string nullable;
    optional : optional nullable;
    decorators : decorator list;
    location : location;
  } <ocaml field_prefix="cto_decl_content_">

type definition_content = {
    ttype <json name="type"> : string;
    declarations : declaration list;
  } <ocaml field_prefix="cto_defn_content_">

type id = {
    ttype <json name="type"> : string;
    name : string;
  } <ocaml field_prefix="cto_id_">

type classRef = {
    ttype <json name="type"> : string;
    name : string;
  } <ocaml field_prefix="cto_extends_">
type classExtension = {
    ttype <json name="type"> : string;
    class : classRef;    
  } <ocaml field_prefix="cto_extends_">
type definition = {
    ttype <json name="type"> : string;
    id : id;
    ?classExtension : classExtension nullable;
    body : definition_content;
    ?abstract : json nullable;
    ?location : location nullable;
} <ocaml field_prefix="cto_defn_">
type import = {
     namespace : string;
} <ocaml field_prefix="cto_import_">
type model = {
    ttype <json name="type"> : string;
    namespace : string;
    imports : import list;
    body : definition list;
  } <ocaml field_prefix="cto_">
<doc text="Type of CTO models">

