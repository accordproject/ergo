namespace org.accordproject.ergo.stdlib

import org.accordproject.cicero.runtime.*

define concept Duration {
	duration : String
}

// DateTime operations
define function now() : DateTime
define function dateTime(x:String) : DateTime

define function dateTimeDayOfMonth(x:DateTime) : Double
define function dateTimeMonth(x:DateTime) : Double
define function dateTimeQuarter(x:DateTime) : Double
define function dateTimeYear(x:DateTime) : Double

define function dateTimeIsAfter(x:DateTime, y:DateTime) : Boolean
define function dateTimeIsBefore(x:DateTime, y:DateTime) : Boolean
define function dateTimeIsSame(x:DateTime, y:DateTime) : Boolean

define function dateTimeDuration(x:String, y:String) : Duration
define function dateTimeSubtract(x:DateTime, y:Duration) : DateTime
define function dateTimeAdd(x:DateTime, y:Duration) : DateTime
define function dateTimeDiff(x:DateTime, y:DateTime) : Duration
define function dateTimeDiffDays(x:DateTime, y:DateTime) : Double
define function dateTimeDiffSeconds(x:DateTime, y:DateTime) : Double

define function min(x:Double[]) : Double
define function count(x:Double[]) : Integer

// Integer operations
define function integerAbs(x:Integer) : Integer
define function integerLog2(x:Integer) : Integer
define function integerSqrt(x:Integer) : Integer
define function integerToDouble(x:Integer) : Double

define function integerMod(x:Integer, y:Integer) : Integer
define function integerMin(x:Integer, y:Integer) : Integer
define function integerMax(x:Integer, y:Integer) : Integer

// Double operations
define function sqrt(x:Double) : Double
define function exp(x:Double) : Double
define function log(x:Double) : Double
define function log10(x:Double) : Double
define function ceil(x:Double) : Double
define function floor(x:Double) : Double
define function abs(x:Double) : Double
define function max(x:Double[]) : Double
define function min(x:Double[]) : Double
define function average(x:Double[]) : Double
define function sum(x:Double[]) : Double
define function doubleToInteger(x:Double) : Integer
define function truncate(x:Double) : Integer

define function maxPair(x:Double, y:Double) : Double
define function minPair(x:Double, y:Double) : Double

// Polymorphic operations
define function toString(x:Any) : String
define function distinct(x:Any[]) : Any[]
define function count(x:Any[]) : Integer
define function flatten(x:Any[][]) : Any[]
define function arrayAdd(x:Any[],y:Any[]) : Any[]
define function arraySubtract(x:Any[],y:Any[]) : Any[]
define function inArray(x:Any,y:Any[]) : Boolean
define function containsAll(l1:Any[], l2:Any[]) : Boolean {
	return arraySubtract(l1,l2) = []
}

define transaction ErgoErrorResponse extends ErrorResponse{
	message : String
}
define function failure(x:String) : ErgoErrorResponse {
	return ErgoErrorResponse{
		message: x
	}
}
