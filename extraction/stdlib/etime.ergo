/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.time

// DateTime operations
// Current DateTime
define function now() : DateTime
// Parse a DateTime
define function parse(x:String) : DateTime

// DateTime components
define function getSecond(x:DateTime) : Long
define function getMinute(x:DateTime) : Long
define function getHour(x:DateTime) : Long
define function getDay(x:DateTime) : Long
define function getWeek(x:DateTime) : Long
define function getMonth(x:DateTime) : Long
define function getQuarter(x:DateTime) : Long
define function getYear(x:DateTime) : Long

// Durations
define function durationSeconds(x:Long) : InternalDuration
define function durationMinutes(x:Long) : InternalDuration
define function durationHours(x:Long) : InternalDuration
define function durationDays(x:Long) : InternalDuration
define function durationWeeks(x:Long) : InternalDuration

define function durationToInternalDuration(du:Duration) : InternalDuration {
	match du.unit
	with "seconds" then return durationSeconds(du.amount)
	with "minutes" then return durationMinutes(du.amount)
	with "hours" then return durationHours(du.amount)
	with "days" then return durationDays(du.amount)
	with "weeks" then return durationWeeks(du.amount)
	else return durationSeconds(du.amount) // Defaults to seconds
}

define function durationAmount(du:InternalDuration) : Long

define function internalDurationToDuration(du:InternalDuration) : Duration {
	return Duration{ unit: "seconds", amount: durationAmount(du) }
}

define function durationAs(du:Duration, u:TemporalUnit) : Duration {
	if u = du.unit
	then return du
	else
	  let amount = 
  	  match u
	    with "seconds" then
	      match du.unit
	      with "minutes" then du.amount * 60
	      with "hours" then du.amount * 60 * 60
	      with "days" then du.amount * 60 * 60 * 24
	      with "weeks" then du.amount * 60 * 60 * 24 * 7
	      else du.amount // Default to seconds
	    with "minutes" then
	      match du.unit
	      with "seconds" then du.amount / 60
	      with "hours" then du.amount * 60
	      with "days" then du.amount * 60 * 24
	      with "weeks" then du.amount * 60 * 24 * 7
	      else du.amount * 60 // Default to seconds
	    with "hours" then
	      match du.unit
	      with "seconds" then du.amount / 60 / 60
	      with "minutes" then du.amount * 60
	      with "days" then du.amount * 24
	      with "weeks" then du.amount * 24 * 7
	      else du.amount * 60 * 60 // Default to seconds
	    with "days" then
	      match du.unit
	      with "seconds" then du.amount / 60 / 60 / 24
	      with "minutes" then du.amount * 60 / 24
	      with "hours" then du.amount / 24
	      with "weeks" then du.amount * 7
	      else du.amount / 60 / 60 / 24 // Default to seconds
	    with "weeks" then
	      match du.unit
	      with "seconds" then du.amount / 60 / 60 / 24 / 7
	      with "minutes" then du.amount * 60 / 24 / 7
	      with "hours" then du.amount / 24 / 7
	      with "days" then du.amount / 7
	      else du.amount / 60 / 60 / 24 / 7 // Default to seconds
	    else // Default to seconds
	      match du.unit
	      with "minutes" then du.amount * 60
	      with "hours" then du.amount * 60 * 60
	      with "days" then du.amount * 60 * 60 * 24
	      with "week" then du.amount * 60 * 60 * 24 * 7
	      else du.amount // Default to seconds
		;
		return Duration{ unit: u, amount: amount }
}

define function addInternal(x:DateTime, y:InternalDuration) : DateTime
define function add(x:DateTime, y:Duration) : DateTime {
	return addInternal(x,durationToInternalDuration(y))
}

define function subtractInternal(x:DateTime, y:InternalDuration) : DateTime
define function subtract(x:DateTime, y:Duration) : DateTime {
	return subtractInternal(x,durationToInternalDuration(y))
}

define function isAfter(x:DateTime, y:DateTime) : Boolean
define function isBefore(x:DateTime, y:DateTime) : Boolean
define function isSame(x:DateTime, y:DateTime) : Boolean

define function diffInternal(x:DateTime, y:DateTime) : InternalDuration
define function diffWithUnit(x:DateTime, y:DateTime, z:TemporalUnit) : Duration {
	return durationAs(internalDurationToDuration(diffInternal(x,y)),z)
}
define function diff(x:DateTime, y:DateTime) : Duration {
	return diffWithUnit(x, y, "seconds") // Defaults to seconds
}

define function dateTimeMin(x:DateTime[]) : DateTime
define function dateTimeMax(x:DateTime[]) : DateTime

define function divide(x:Duration, y:Duration) : Double {
	let du1 = durationToInternalDuration(x);
	let du2 = durationToInternalDuration(y);
	return longToDouble(durationAmount(du1)) / longToDouble(durationAmount(du2))
}

define function periodDays(x:Long) : InternalPeriod
define function periodWeeks(x:Long) : InternalPeriod
define function periodMonths(x:Long) : InternalPeriod
define function periodQuarters(x:Long) : InternalPeriod
define function periodYears(x:Long) : InternalPeriod

define function periodToInternalPeriod(du:Period) : InternalPeriod {
	match du.unit
	with "days" then return periodDays(du.amount)
	with "weeks" then return periodWeeks(du.amount)
	with "months" then return periodMonths(du.amount)
	with "quarters" then return periodQuarters(du.amount)
	with "years" then return periodYears(du.amount)
	else return periodDays(du.amount) // Defaults to days
}

define function startOfDay(x:DateTime) : DateTime
define function startOfWeek(x:DateTime) : DateTime
define function startOfMonth(x:DateTime) : DateTime
define function startOfQuarter(x:DateTime) : DateTime
define function startOfYear(x:DateTime) : DateTime

define function startOf(x:DateTime, y:PeriodUnit) : DateTime {
	match y
	with "days" then return startOfDay(x)
	with "weeks" then return startOfWeek(x)
	with "months" then return startOfMonth(x)
	with "quarters" then return startOfQuarter(x)
	with "years" then return startOfYear(x)
	else return startOfDay(x) // Default to days
}

define function endOfDay(x:DateTime) : DateTime
define function endOfWeek(x:DateTime) : DateTime
define function endOfMonth(x:DateTime) : DateTime
define function endOfQuarter(x:DateTime) : DateTime
define function endOfYear(x:DateTime) : DateTime

define function endOf(x:DateTime, y:PeriodUnit) : DateTime {
	match y
	with "days" then return endOfDay(x)
	with "weeks" then return endOfWeek(x)
	with "months" then return endOfMonth(x)
	with "quarters" then return endOfQuarter(x)
	with "years" then return endOfYear(x)
	else return endOfDay(x) // Default to days
}

