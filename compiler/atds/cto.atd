(*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

<doc text="Hyperledger Composer CTO data structures.

   Based on the documentation available at:
   https://hyperledger.github.io/composer/reference/cto_language.html

">

type json <ocaml module="Yojson.Basic" t="t"> = abstract
<doc text="Type of arbitrary JSON values.">

type position = {
    ttype <json name="$class"> : string;
    line : int;
    column: int;
    offset : int;
  } <ocaml field_prefix="cto_position_">

type range = {
    ttype <json name="$class"> : string;
    start : position;
    end : position;
} <ocaml field_prefix="cto_range_">

type decorator = json

type typeIdentifier = {
    ttype <json name="$class"> : string;
    name : string;
    ?namespace : string nullable;
  } <ocaml field_prefix="cto_type_identifier_">

type identified = {
    ttype <json name="$class"> : string;
    ?name : string nullable;
  } <ocaml field_prefix="cto_identified_">

type property = {
    ttype <json name="$class"> : string;
    name : string;
    ?isOptional : bool nullable;
    ?isArray : bool nullable;
    ?ptype <json name="type"> : typeIdentifier nullable;
    ?decorators : decorator list nullable;
    ?validator : json nullable;
    ?defaultValue: json nullable;
    ?location : range nullable;
  } <ocaml field_prefix="cto_property_">

type declaration = {
    ttype <json name="$class"> : string;
    name : string;
    properties : property list;
    ?superType : typeIdentifier nullable;
    ?isAbstract : bool nullable;
    ?location : range nullable;
} <ocaml field_prefix="cto_declaration_">

type import = {
     ttype <json name="$class"> : string;
     ?name : string nullable;
     namespace : string;
     ?uri : string nullable;
} <ocaml field_prefix="cto_import_">

type model = {
    ttype <json name="$class"> : string;
    namespace : string;
    imports : import list;
    declarations : declaration list;
  } <ocaml field_prefix="cto_model_">
<doc text="Type of CTO models">
